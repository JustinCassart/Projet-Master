package tests

import (
	"math/bits"
	"stringmatching/utils"
	"testing"
)

func TestSortInt(t *testing.T) {
	arrInt := []int{5, 2, 3}
	utils.SortSlice(arrInt)
	for i, v := range []int{2, 3, 5} {
		if arrInt[i] != v {
			t.Errorf("Value error in index %d : expected %v but found %v", i, v, arrInt[i])
		}
	}
}

func BenchmarkSortInt(b *testing.B) {
	arrInt := []int{5, 2, 3}
	for i := 0; i < b.N; i++ {
		utils.SortSlice(arrInt)
	}
}

func TestArrayShift(t *testing.T) {
	states := []uint{3, 2, 3}
	expected := []uint{2, 4, 7}
	utils.ArrayShift(&states, 2)
	CheckSlice(t, expected, states)
}

func TestArrayShift64(t *testing.T) {
	states := []uint{0, 1 << (bits.UintSize - 1)}
	utils.ArrayShift(&states, 64)
	CheckSlice(t, []uint{1, 1}, states)
}

func TestArrayShift6464(t *testing.T) {
	var v uint = 1 << (bits.UintSize - 1)
	states := []uint{v, v, v}
	utils.ArrayShift(&states, 64)
	utils.ArrayShift(&states, 64)
	CheckSlice(t, []uint{2, 2, 3}, states)
}

func BenchmarkArrayShift(b *testing.B) {
	states := []uint{6654190341301905859, 3859494423573077845, 7351961320169850113, 3146357967465090586, 8135670385020754906, 4650173511577785052, 5737984190587840960, 6759448884755621708, 5623815084535005471, 1870693175747089543, 4314462473397893495, 7734311909208063798, 7364126959396728366, 3633732498971509080, 7201386379489287414, 6133246536296428954, 1200989895374747354, 1739665347166617660, 8489130839128789038, 1325491978098678745, 6922410216132408244, 8756580004269670652, 401727097342455166, 3607600092940680778, 6074505162864103725, 4167302950619195634, 765240440285818883, 3427297946543696183, 6511153039190816592, 7240956093936592073, 8055280491248013030, 3349935836547895940, 3582774484453064566, 6875288138196041942, 7830082310705000817, 3333377809328591302, 396514806025503528, 9104648728089817220, 5544766430011591300, 4151903128838479888, 8618026276516616761, 7593434229146830169, 6036933870948705188, 5868942198247423142, 4151128613358167062, 174090759680697539, 1953449757253329867, 1620607908161054099, 2687239991213546343, 8485730520648137500, 1914072804336239375, 5061487984780515714, 3125966138938437404, 1423740906958579805, 2314047545292996910, 19948204800452781, 6378460792547104371, 8361652074747189771, 4187686652901236011, 5381515164742370125, 2056959736001266083, 6022643758346187293, 2153447584549016261, 2760546875784856740, 7393074633751588340, 206723703590213167, 8519385208786981988, 2680121887515740954, 9085364636935688066, 7947388191459325024, 3815718696357517186, 7829565907561689117, 635939536465639803, 6374509464602924943, 3012078506831677303, 7314676222177948844, 4006850549748543673, 6001660251020219249, 8354442125154222586, 2883123181737661609, 9014601997066517663, 5031361429128775265, 1143867092254422019, 1860762517362685898, 2102412639265061194, 2373865352431993542, 7008441926389218897, 2233396836495069292, 2546203952079403321, 4365858299958004602, 1089430270642894764, 5877520259129693840, 3951132830213215010, 2058910853170940942, 2698001918010123713, 7754869583589433866, 2129679343283026140, 5294297378971114602, 2658045798443652490, 6037514385896389771}
	for i := 0; i < b.N; i++ {
		utils.ArrayShift(&states, 5700671703220345178)
	}
}

func TestArrayOp(t *testing.T) {
	array1 := []uint{1, 2, 3}
	array2 := []uint{3, 2, 1}
	utils.ArrayOp(func(i int, arrays ...*[]uint) uint {
		return (*arrays[0])[i] & (*arrays[1])[i]
	}, &array1, &array2)
	expected := []uint{1, 2, 1}
	CheckSlice(t, expected, array1)
}

func BenchmarkArrayOp(b *testing.B) {
	array1 := []uint{1, 2, 3, 458, 4548, 6151, 11885544, 56484551651, 5654845133}
	array2 := []uint{3, 2, 1, 56518, 8484684, 84684684, 84684684, 84684684, 8468484}
	for i := 0; i < b.N; i++ {
		utils.ArrayOp(func(i int, arrays ...*[]uint) uint {
			return (*arrays[0])[i] & (*arrays[1])[i]
		}, &array1, &array2)
	}
}
