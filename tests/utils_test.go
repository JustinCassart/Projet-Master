package tests

import (
	"math/bits"
	"stringmatching/utils"
	"testing"
)

func TestSortInt(t *testing.T) {
	arrInt := []int{5, 2, 3}
	utils.SortSlice(arrInt)
	for i, v := range []int{2, 3, 5} {
		if arrInt[i] != v {
			t.Errorf("Value error in index %d : expected %v but found %v", i, v, arrInt[i])
		}
	}
}

func BenchmarkSortInt(b *testing.B) {
	arrInt := []int{5, 2, 3}
	for i := 0; i < b.N; i++ {
		utils.SortSlice(arrInt)
	}
}

func TestArrayShift(t *testing.T) {
	states := []uint{3, 2, 3}
	expected := []uint{3, 1, 3}
	utils.ArrayShift(states, []int{2, 2, 2})
	CheckSlice(t, expected, states)
}

func TestArrayShift64(t *testing.T) {
	states := []uint{0, 1 << (bits.UintSize - 1)}
	utils.ArrayShift(states, []int{64, 64})
	CheckSlice(t, []uint{1, 1}, states)
}

func TestArrayShift6464(t *testing.T) {
	var v uint = 1 << (bits.UintSize - 1)
	states := []uint{v, v, v}
	utils.ArrayShift(states, []int{64, 64, 64})
	utils.ArrayShift(states, []int{64, 64, 64})
	CheckSlice(t, []uint{2, 2, 3}, states)
}

func BenchmarkArrayShift(b *testing.B) {
	states := []uint{6654190341301905859, 3859494423573077845, 7351961320169850113, 3146357967465090586, 8135670385020754906, 4650173511577785052, 5737984190587840960, 6759448884755621708, 5623815084535005471, 1870693175747089543, 4314462473397893495, 7734311909208063798, 7364126959396728366, 3633732498971509080, 7201386379489287414, 6133246536296428954, 1200989895374747354, 1739665347166617660, 8489130839128789038, 1325491978098678745, 6922410216132408244, 8756580004269670652, 401727097342455166, 3607600092940680778, 6074505162864103725, 4167302950619195634, 765240440285818883, 3427297946543696183, 6511153039190816592, 7240956093936592073, 8055280491248013030, 3349935836547895940, 3582774484453064566, 6875288138196041942, 7830082310705000817, 3333377809328591302, 396514806025503528, 9104648728089817220, 5544766430011591300, 4151903128838479888, 8618026276516616761, 7593434229146830169, 6036933870948705188, 5868942198247423142, 4151128613358167062, 174090759680697539, 1953449757253329867, 1620607908161054099, 2687239991213546343, 8485730520648137500, 1914072804336239375, 5061487984780515714, 3125966138938437404, 1423740906958579805, 2314047545292996910, 19948204800452781, 6378460792547104371, 8361652074747189771, 4187686652901236011, 5381515164742370125, 2056959736001266083, 6022643758346187293, 2153447584549016261, 2760546875784856740, 7393074633751588340, 206723703590213167, 8519385208786981988, 2680121887515740954, 9085364636935688066, 7947388191459325024, 3815718696357517186, 7829565907561689117, 635939536465639803, 6374509464602924943, 3012078506831677303, 7314676222177948844, 4006850549748543673, 6001660251020219249, 8354442125154222586, 2883123181737661609, 9014601997066517663, 5031361429128775265, 1143867092254422019, 1860762517362685898, 2102412639265061194, 2373865352431993542, 7008441926389218897, 2233396836495069292, 2546203952079403321, 4365858299958004602, 1089430270642894764, 5877520259129693840, 3951132830213215010, 2058910853170940942, 2698001918010123713, 7754869583589433866, 2129679343283026140, 5294297378971114602, 2658045798443652490, 6037514385896389771}
	for i := 0; i < b.N; i++ {
		utils.ArrayShift(states, []int{5700671703220345178, 4386286011222567096, 8575606224625731906, 3637167754736635822, 5351295445321927552, 5290386909246372897, 3689757255787153892, 3976729018782688790, 3650923817399606, 8624313753746467388, 7354213802629635926, 6958273208999464997, 8612692409303441814, 1189525271627458492, 414321284446320167, 6206385111817043680, 3759232510146538173, 5021848070799476078, 1092685817832793005, 4113849280696294879, 6696622842097436616, 6839859921293005598, 6844569388795110768, 6506792270607809185, 3674628061431223893, 6950145092216696459, 5075096907783764085, 7082377877991717720, 6459026495610493668, 5972614764822994583, 3375955071521619293, 1664736769405272226, 406675427405894295, 3473729264042094000, 4671037181974947532, 3342683370465222015, 1295333914789828970, 6733005991356194313, 6308517053886428104, 3376646024114897882, 3865149433160342759, 481431380608196824, 7612600347285124657, 7828418513267804111, 1633922229972695557, 7085029455171672394, 1709853819715473398, 423731690427288206, 7885589757435475737, 2250328393805973454, 1432830067783884221, 4762062237711700938, 620485682194634000, 4151797387402827418, 6594303101107957300, 760452270283905529, 8745104680553973753, 7478531489726086326, 2636087532057547089, 8805424648201794335, 1970611565260923414, 5429354661252763991, 9047964591353553190, 6591643740085423488, 9095432944158834486, 6593926020190619066, 6296640025009875135, 7912254364481904066, 3740156370581424029, 725634006504388016, 6388149835061322411, 8865779210136495974, 1743236486474357258, 3867595841047837058, 1992466881156244790, 6845344111924109106, 1253849310670585997, 7802396813614591480, 6868524362292395854, 2055093530762498624, 8887309019196916383, 4701186663168565394, 2289134857757710899, 8975424726610625682, 1295570308624733116, 3490906920263571478, 2601889107867589787, 8953610854512479656, 4916382909265102261, 7468334723354101630, 921352839196971140, 8411864365641998018, 3964265503552900326, 7129379283356863314, 7300250211904503878, 8733956951250941558, 4594514463014788791, 5495951360649206834, 5702246497314224111, 6354183437446903231})
	}
}

func TestArrayOp(t *testing.T) {
	array1 := []uint{1, 2, 3}
	array2 := []uint{3, 2, 1}
	utils.ArrayOp(func(i int, arrays ...[]uint) uint {
		return arrays[0][i] & arrays[1][i]
	}, array1, array2)
	expected := []uint{1, 2, 1}
	CheckSlice(t, expected, array1)
}

func BenchmarkArrayOp(b *testing.B) {
	array1 := []uint{1, 2, 3, 458, 4548, 6151, 11885544, 56484551651, 5654845133}
	array2 := []uint{3, 2, 1, 56518, 8484684, 84684684, 84684684, 84684684, 8468484}
	for i := 0; i < b.N; i++ {
		utils.ArrayOp(func(i int, arrays ...[]uint) uint {
			return arrays[0][i] & arrays[1][i]
		}, array1, array2)
	}
}
